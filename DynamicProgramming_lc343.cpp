//
// Created by XK on 2022/5/19.
//
#include <vector>

using namespace std;

class Solution343 {
public:
    int integerBreak(int n) {
        //c乘积表[i]表示将正整数i拆分之后得到的最大乘积，需要取到n，所以初始化大小n+1
        vector<int> c乘积表(n+1);
        //0和1无法拆分所以应该从3开始遍历，且c乘积表[2]初始化为1。
        c乘积表[2] = 1;
        for (int i = 3; i < c乘积表.size(); ++i) {
            //现在i是固定的，
            int d当前最大值 = 0;
            //拆分出的第一个正整数j从1开始遍历，最大为i-1。
            for (int j = 1; j < i; ++j) {
                //可以这样理解：i固定之后，拆出第一个正整数j为1时，c乘积表[i]的最大值用“d当前最大值”暂存。
                //然后j增加，现在拆出第一个正整数为2时，c乘积表[i]的最大值不仅需要在“j * (i - j), j * c乘积表[i - j]”两个值之间比较，
                //还需要和上次拆出的第一个正整数为1时的最大值进行比较。
                d当前最大值 = max(d当前最大值, max(j * (i - j), j * c乘积表[i - j]));
            }
            //上述循环结束后，d当前最大值 保存的是在i固定的情况下，j遍历所有结果后的最大值。
            c乘积表[i] = d当前最大值;
        }
        return c乘积表[n];
    }
};